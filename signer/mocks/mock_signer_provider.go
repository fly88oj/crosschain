// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/blockchain/signer/signer_provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	signer "github.com/openweb3-io/crosschain/signer"
)

// MockSignerProvider is a mock of SignerProvider interface.
type MockSignerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSignerProviderMockRecorder
}

// MockSignerProviderMockRecorder is the mock recorder for MockSignerProvider.
type MockSignerProviderMockRecorder struct {
	mock *MockSignerProvider
}

// NewMockSignerProvider creates a new mock instance.
func NewMockSignerProvider(ctrl *gomock.Controller) *MockSignerProvider {
	mock := &MockSignerProvider{ctrl: ctrl}
	mock.recorder = &MockSignerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignerProvider) EXPECT() *MockSignerProviderMockRecorder {
	return m.recorder
}

// Provide mocks base method.
func (m *MockSignerProvider) Provide(ctx context.Context, appId, network, key string) (signer.Signer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide", ctx, appId, network, key)
	ret0, _ := ret[0].(signer.Signer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockSignerProviderMockRecorder) Provide(ctx, appId, network, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockSignerProvider)(nil).Provide), ctx, appId, network, key)
}

// Register mocks base method.
func (m *MockSignerProvider) Register(network string, creator signer.SignerCreator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", network, creator)
}

// Register indicates an expected call of Register.
func (mr *MockSignerProviderMockRecorder) Register(network, creator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSignerProvider)(nil).Register), network, creator)
}
